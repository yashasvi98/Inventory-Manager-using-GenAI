1. Act as a product manager and technical architect. 
	Analyze this idea: 
	Backend API System 
    For: Backend developers, Java/Spring Boot specialists
    Requirement: Build a comprehensive REST API with multiple endpoints
    Examples: User management system, inventory management, payment processing system, data analytics API
		
	Generate:
	1. functional requirements (user stories)
	2. Non functional requirements (performance, security)
	3. technical constraints
	4. success criteria
	5. Out of scope items
	
2. Break down these requirements into actionable tasks:
	
	1. Functional Requirements (User Stories)
       -As a warehouse manager I want to create, read, update and delete inventory items so that the catalog stays accurate.
       -As a procurement officer I want to assign SKUs, categories and suppliers to items so that I can trace origin and cost.
       -As a warehouse operator I want to adjust stock levels (increase/decrease) with reasons (receipt, sale, loss) so that inventory records remain correct.
       -As a system I want to trigger low-stock notifications when quantity falls below a threshold so that restocking can be initiated.
       -As a purchasing manager I want to reserve stock for pending orders so that I prevent overselling.
       -As a quality officer I want to record batch numbers and expiry dates on per-item basis so that I can track age-sensitive inventory.
       -As a system I want to block sale of expired items so that compliance is enforced.
       -As a logistics coordinator I want to assign items to specific warehouse zones or bins so that picking can be streamlined.
       -As a system I want to report inter-warehouse transfers so that stock movements are auditable.
       -As an operations manager I want endpoints to fetch summary metrics (daily receipts, dispatches, current stock by category) so that I can monitor KPIs.
       -As a data analyst I want paginated, filterable logs of all stock movements so that I can perform detailed audits.
       -As any API consumer I want consistent JSON error responses with HTTP status codes and correlation IDs so that I can handle failures uniformly.
       -As a developer I want autogenerated OpenAPI documentation so that I can discover and test endpoints.
	   
	2. Non-Functional Requirements
	   -Performance: 95th percentile response time for simple CRUD calls under typical load must be under 150 ms.
	   -Concurrent Load: System must sustain 500 concurrent users with no degradation.
	   -Batch Reporting: Batch reports on up to 500,000 records must complete within 3 s.
	   -Scalability: Service must scale horizontally via container orchestration; read-replica databases for reporting.
	   -Security: OAuth2 Bearer tokens with role-based access control; input validation and encoding; TLS 1.2+; AES-256 at rest; audit logs for changes.
	   -Reliability & Availability: 99.9% uptime SLA; health checks and circuit breakers; automated daily backups with point-in-time recovery.
	   -Maintainability: Unit and integration test coverage â‰¥ 80%; structured logs with correlation IDs; clear module boundaries and clean code principles
	   
Organize by:
		-Backend taks
		-Testing Tasks
		-Documentation tasks
		
		
3. Feature: 
for each backend feature from the above feature list, generate:
	-Component/module structure
	-API endpoints needed
	-Database Schema
	-Validation rules
	-Error handling approach
	-Test scenarios
	
4. Testing:
Generate comprehensive tests for each feature:
	-Unit tests with edge cases
	-Integration test scenarios
	-Performance test scenarios
	-Security test scenarios
	
5. Documentation: 
Create documentation for each endpoint being used:
	-Brief Description
	-Request body and details
	-Technical implementation details
	
	
6. Implementation:
	-Role: Act as a senior backend java Springboot specialist developer. 
	-Context: I want to build an inventory management system
	-Task: Create the backend code of this project in java using springboot.
	-Format: Use latest java and springboot, create an entire codebase for this project. Use latest nomenclature conventions, apply the best suited design principles/coding practices and generate a clean structure.
	
	
7. Code review:

	-Role: you are a senior backend developer with tons of java and springboot experience. you are well versed with latest coding practices. 
	-Context: I am trying to review my code to find any possible errors, poor coding practices and any other issues
	-Task: you must review the code and fix any issue you find in the code
	-Format: maintain java/springboot format with latest conventions and practices

8. Further Improvements:
	-Role: you are a Technical Lead for Java and Springboot
	-Context: I want to improve my codebase's test coverage, reduce code smells and bugs, and improve the healthiness of the codebase overall
	-Task: Check each class and file in the project, and come up with suggestions of improvement 
	-Format: retain the latest java and springboot coding conventions and practices